digraph "Catch::NonCopyable"
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{Catch::NonCopyable\n||# NonCopyable()\l# ~NonCopyable()\l- NonCopyable()\l- operator=()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black"];
  Node1 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node2 [label="{Catch::IShared\n||+ ~IShared()\l+ addRef()\l+ release()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structCatch_1_1IShared.html"];
  Node2 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node3 [label="{Catch::ITestCase\n||+ invoke()\l# ~ITestCase()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structCatch_1_1ITestCase.html"];
  Node3 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node4 [label="{Catch::SharedImpl\<\l ITestCase \>\n|+ m_rc\l|+ SharedImpl()\l+ addRef()\l+ release()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structCatch_1_1SharedImpl.html"];
  Node4 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node5 [label="{Catch::MethodTestCase\< C \>\n|- m_method\l|+ MethodTestCase()\l+ invoke()\l- ~MethodTestCase()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classCatch_1_1MethodTestCase.html"];
  Node2 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node6 [label="{Catch::SharedImpl\<\l IShared \>\n|+ m_rc\l|+ SharedImpl()\l+ addRef()\l+ release()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structCatch_1_1SharedImpl.html"];
  Node6 -> Node7 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node7 [label="{Catch::Matchers::Impl\l::Matcher\< ExpressionT \>\n||+ ~Matcher()\l+ clone()\l+ match()\l+ toString()\l+ operator&&()\l+ operator\|\|()\l+ operator!()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structCatch_1_1Matchers_1_1Impl_1_1Matcher.html"];
  Node7 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node8 [label="{Catch::Matchers::Impl\l::MatcherImpl\< ExpressionT \>\n||+ clone()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structCatch_1_1Matchers_1_1Impl_1_1MatcherImpl.html"];
  Node8 -> Node9 [dir="back",color="orange",fontsize="10",style="solid",label=" \< Equals, std::string \>" ];
  Node9 [label="{Catch::Matchers::Impl\l::MatcherImpl\< Equals,\l std::string \>\n||+ clone()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structCatch_1_1Matchers_1_1Impl_1_1MatcherImpl.html"];
  Node9 -> Node10 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node10 [label="{Catch::Matchers::Impl\l::StdString::Equals\n|+ m_data\l|+ Equals()\l+ Equals()\l+ ~Equals()\l+ match()\l+ toString()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structCatch_1_1Matchers_1_1Impl_1_1StdString_1_1Equals.html"];
  Node8 -> Node11 [dir="back",color="orange",fontsize="10",style="solid",label=" \< Contains, std::string \>" ];
  Node11 [label="{Catch::Matchers::Impl\l::MatcherImpl\< Contains,\l std::string \>\n||+ clone()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structCatch_1_1Matchers_1_1Impl_1_1MatcherImpl.html"];
  Node11 -> Node12 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node12 [label="{Catch::Matchers::Impl\l::StdString::Contains\n|+ m_data\l|+ Contains()\l+ Contains()\l+ ~Contains()\l+ match()\l+ toString()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structCatch_1_1Matchers_1_1Impl_1_1StdString_1_1Contains.html"];
  Node8 -> Node13 [dir="back",color="orange",fontsize="10",style="solid",label=" \< AnyOf\< ExpressionT\l \>, ExpressionT \>" ];
  Node13 [label="{Catch::Matchers::Impl\l::MatcherImpl\< AnyOf\l\< ExpressionT \>, ExpressionT \>\n||+ clone()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structCatch_1_1Matchers_1_1Impl_1_1MatcherImpl.html"];
  Node13 -> Node14 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node14 [label="{Catch::Matchers::Impl\l::Generic::AnyOf\< ExpressionT \>\n|- m_matchers\l|+ AnyOf()\l+ AnyOf()\l+ add()\l+ match()\l+ toString()\l+ operator\|\|()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classCatch_1_1Matchers_1_1Impl_1_1Generic_1_1AnyOf.html"];
  Node8 -> Node15 [dir="back",color="orange",fontsize="10",style="solid",label=" \< EndsWith, std::string \>" ];
  Node15 [label="{Catch::Matchers::Impl\l::MatcherImpl\< EndsWith,\l std::string \>\n||+ clone()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structCatch_1_1Matchers_1_1Impl_1_1MatcherImpl.html"];
  Node15 -> Node16 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node16 [label="{Catch::Matchers::Impl\l::StdString::EndsWith\n|+ m_data\l|+ EndsWith()\l+ EndsWith()\l+ ~EndsWith()\l+ match()\l+ toString()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structCatch_1_1Matchers_1_1Impl_1_1StdString_1_1EndsWith.html"];
  Node8 -> Node17 [dir="back",color="orange",fontsize="10",style="solid",label=" \< Not\< ExpressionT\l \>, ExpressionT \>" ];
  Node17 [label="{Catch::Matchers::Impl\l::MatcherImpl\< Not\< Expression\lT \>, ExpressionT \>\n||+ clone()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structCatch_1_1Matchers_1_1Impl_1_1MatcherImpl.html"];
  Node17 -> Node18 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node18 [label="{Catch::Matchers::Impl\l::Generic::Not\< ExpressionT \>\n|- m_matcher\l|+ Not()\l+ Not()\l+ match()\l+ toString()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classCatch_1_1Matchers_1_1Impl_1_1Generic_1_1Not.html"];
  Node8 -> Node19 [dir="back",color="orange",fontsize="10",style="solid",label=" \< AllOf\< ExpressionT\l \>, ExpressionT \>" ];
  Node19 [label="{Catch::Matchers::Impl\l::MatcherImpl\< AllOf\l\< ExpressionT \>, ExpressionT \>\n||+ clone()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structCatch_1_1Matchers_1_1Impl_1_1MatcherImpl.html"];
  Node19 -> Node20 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node20 [label="{Catch::Matchers::Impl\l::Generic::AllOf\< ExpressionT \>\n|- m_matchers\l|+ AllOf()\l+ AllOf()\l+ add()\l+ match()\l+ toString()\l+ operator&&()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classCatch_1_1Matchers_1_1Impl_1_1Generic_1_1AllOf.html"];
  Node8 -> Node21 [dir="back",color="orange",fontsize="10",style="solid",label=" \< StartsWith, std::\lstring \>" ];
  Node21 [label="{Catch::Matchers::Impl\l::MatcherImpl\< StartsWith,\l std::string \>\n||+ clone()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structCatch_1_1Matchers_1_1Impl_1_1MatcherImpl.html"];
  Node21 -> Node22 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node22 [label="{Catch::Matchers::Impl\l::StdString::StartsWith\n|+ m_data\l|+ StartsWith()\l+ StartsWith()\l+ ~StartsWith()\l+ match()\l+ toString()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structCatch_1_1Matchers_1_1Impl_1_1StdString_1_1StartsWith.html"];
  Node7 -> Node23 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node23 [label="{MatcherImpl\< AllOf\l\< ExpressionT \>, ExpressionT \>\n||+ clone()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structCatch_1_1Matchers_1_1Impl_1_1MatcherImpl.html"];
  Node23 -> Node20 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node7 -> Node24 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node24 [label="{MatcherImpl\< AnyOf\l\< ExpressionT \>, ExpressionT \>\n||+ clone()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structCatch_1_1Matchers_1_1Impl_1_1MatcherImpl.html"];
  Node24 -> Node14 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node7 -> Node25 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node25 [label="{MatcherImpl\< Not\< Expression\lT \>, ExpressionT \>\n||+ clone()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structCatch_1_1Matchers_1_1Impl_1_1MatcherImpl.html"];
  Node25 -> Node18 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node7 -> Node26 [dir="back",color="orange",fontsize="10",style="solid",label=" \< std::string \>" ];
  Node26 [label="{Catch::Matchers::Impl\l::Matcher\< std::string \>\n||+ ~Matcher()\l+ clone()\l+ match()\l+ toString()\l+ operator&&()\l+ operator\|\|()\l+ operator!()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structCatch_1_1Matchers_1_1Impl_1_1Matcher.html"];
  Node26 -> Node11 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node26 -> Node15 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node26 -> Node9 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node26 -> Node21 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node6 -> Node26 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node1 -> Node27 [dir="back",color="firebrick4",fontsize="10",style="solid",arrowtail="onormal"];
  Node27 [label="{Catch::Section\n|- m_info\l- m_name\l- m_assertions\l- m_sectionIncluded\l- m_timer\l|+ Section()\l+ ~Section()\l+ operator bool()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classCatch_1_1Section.html"];
}
