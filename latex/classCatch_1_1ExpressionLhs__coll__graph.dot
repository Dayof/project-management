digraph "Catch::ExpressionLhs&lt; T &gt;"
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{Catch::ExpressionLhs\< T \>\n||+ ExpressionLhs()\l+ operator==()\l+ operator!=()\l+ operator\<()\l+ operator\>()\l+ operator\<=()\l+ operator\>=()\l+ operator==()\l+ operator!=()\l+ endExpression()\l+ operator+()\l+ operator-()\l+ operator/()\l+ operator*()\l+ operator&&()\l+ operator\|\|()\l- operator=()\l- captureExpression()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black"];
  Node2 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -m_rb" ,arrowhead="odiamond"];
  Node2 [label="{Catch::ResultBuilder\n|- m_shouldDebugBreak\l- m_shouldThrow\l|+ ResultBuilder()\l+ operator\<=()\l+ operator\<=()\l+ operator\<\<()\l+ operator&&()\l+ operator\|\|()\l+ setResultType()\l+ setResultType()\l+ setLhs()\l+ setRhs()\l+ setOp()\l+ endExpression()\l+ reconstructExpression()\l+ build()\l+ useActiveException()\l+ captureResult()\l+ captureExpression()\l+ captureExpectedException()\l+ captureExpectedException()\l+ handleResult()\l+ react()\l+ shouldDebugBreak()\l+ allowThrows()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classCatch_1_1ResultBuilder.html"];
  Node3 -> Node2 [color="grey25",fontsize="10",style="solid",label=" -m_data" ,arrowhead="odiamond"];
  Node3 [label="{Catch::AssertionResultData\n|+ resultType\l|+ AssertionResultData()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structCatch_1_1AssertionResultData.html"];
  Node4 -> Node3 [color="grey25",fontsize="10",style="solid",label=" +reconstructedExpression\n+message" ,arrowhead="odiamond"];
  Node4 [label="{std::string\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip="STL class. "];
  Node5 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node5 [label="{std::basic_string\<\l char \>\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip="STL class. "];
  Node6 -> Node2 [color="grey25",fontsize="10",style="solid",label=" -m_assertionInfo" ,arrowhead="odiamond"];
  Node6 [label="{Catch::AssertionInfo\n|+ resultDisposition\l|+ AssertionInfo()\l+ AssertionInfo()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structCatch_1_1AssertionInfo.html"];
  Node7 -> Node6 [color="grey25",fontsize="10",style="solid",label=" +lineInfo" ,arrowhead="odiamond"];
  Node7 [label="{Catch::SourceLineInfo\n|+ line\l|+ SourceLineInfo()\l+ SourceLineInfo()\l+ SourceLineInfo()\l+ empty()\l+ operator==()\l+ operator\<()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structCatch_1_1SourceLineInfo.html"];
  Node4 -> Node7 [color="grey25",fontsize="10",style="solid",label=" +file" ,arrowhead="odiamond"];
  Node4 -> Node6 [color="grey25",fontsize="10",style="solid",label=" +macroName\n+capturedExpression" ,arrowhead="odiamond"];
  Node8 -> Node2 [color="grey25",fontsize="10",style="solid",label=" -m_exprComponents" ,arrowhead="odiamond"];
  Node8 [label="{Catch::ResultBuilder\l::ExprComponents\n|+ testFalse\l|+ ExprComponents()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structCatch_1_1ResultBuilder_1_1ExprComponents.html"];
  Node4 -> Node8 [color="grey25",fontsize="10",style="solid",label=" +lhs\n+op\n+rhs" ,arrowhead="odiamond"];
  Node9 -> Node2 [color="grey25",fontsize="10",style="solid",label=" -m_stream" ,arrowhead="odiamond"];
  Node9 [label="{Catch::CopyableStream\n||+ CopyableStream()\l+ CopyableStream()\l+ operator=()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structCatch_1_1CopyableStream.html"];
  Node10 -> Node9 [color="grey25",fontsize="10",style="solid",label=" +oss" ,arrowhead="odiamond"];
  Node10 [label="{std::ostringstream\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip="STL class. "];
  Node11 -> Node10 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node11 [label="{std::basic_ostringstream\l\< char \>\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip="STL class. "];
  Node12 -> Node11 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node12 [label="{std::basic_ostream\l\< Char \>\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip="STL class. "];
  Node13 -> Node12 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node13 [label="{std::basic_ios\< Char \>\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip="STL class. "];
  Node14 -> Node13 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node14 [label="{std::ios_base\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip="STL class. "];
  Node15 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -m_lhs" ,arrowhead="odiamond"];
  Node15 [label="{T\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled"];
}
