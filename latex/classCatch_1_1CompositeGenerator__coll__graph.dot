digraph "Catch::CompositeGenerator&lt; T &gt;"
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{Catch::CompositeGenerator\< T \>\n|- m_totalSize\l|+ CompositeGenerator()\l+ CompositeGenerator()\l+ setFileInfo()\l+ ~CompositeGenerator()\l+ operator T()\l+ add()\l+ then()\l+ then()\l- move()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black"];
  Node2 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -m_composed" ,arrowhead="odiamond"];
  Node2 [label="{std::vector\< const\l Catch::IGenerator\<\l T \> * \>\n|+ elements\l|}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled"];
  Node3 -> Node2 [dir="back",color="orange",fontsize="10",style="solid",label=" \< const Catch::IGenerator\l\< T \> * \>" ];
  Node3 [label="{std::vector\< T \>\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip="STL class. "];
  Node4 -> Node3 [color="grey25",fontsize="10",style="solid",label=" +elements" ,arrowhead="odiamond"];
  Node4 [label="{T\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled"];
  Node5 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -m_fileInfo" ,arrowhead="odiamond"];
  Node5 [label="{std::string\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip="STL class. "];
  Node6 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node6 [label="{std::basic_string\<\l char \>\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip="STL class. "];
}
